f
--- ObjectArrayCodec.java
+++ ObjectArrayCodec.java
@@ -9,15 +9,23 @@
     public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
 
         Class componentClass;
+        Class baseClass = java.io.Serializable.class;
         
         Type componentType;
         if (type instanceof GenericArrayType) {
             GenericArrayType clazz = (GenericArrayType) type;
             componentType = clazz.getGenericComponentType();
 
+            // Validate class type to be based on java.io.Serializable
+            if (!baseClass.isAssignableFrom(componentType)) {
+                throw new JSONException("Illegal type found in array: " + componentType);
+            }
+
             if (componentType instanceof TypeVariable) {
                 TypeVariable typeVar = (TypeVariable) componentType;
                 
                 Type objType = parser.getContext().type;
                 
+                // Validate class type to be based on java.io.Serializable
+                if (!baseClass.isAssignableFrom(objType)) {
+                    throw new JSONException("Illegal type found in array: " + objType);
+                }
+
                 if (objType instanceof ParameterizedType) {
                     ParameterizedType objParamType = (ParameterizedType) objType;
                     Type objRawType = objParamType.getRawType();
@@ -47,7 +55,11 @@
         } else {
             Class clazz = (Class) type;
             componentType = componentClass = clazz.getComponentType();
+            
+            // Validate class type to be based on java.io.Serializable
+            if (!baseClass.isAssignableFrom(componentType)) {
+                throw new JSONException("Illegal type found: " + componentType);
+            }
         }
 
         JSONArray array = new JSONArray();
@@ -56,4 +68,4 @@
         return (T) toObjectArray(parser, componentClass, array);
     }
 }
\ No newline at end of file
+```