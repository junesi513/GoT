f
diff --git a/ObjectArrayCodec.java b/ObjectArrayCodec.java
index 22322b3..f42e081 100644
--- a/ObjectArrayCodec.java
+++ b/ObjectArrayCodec.java
@@ -1,11 +1,12 @@
 // @author wenshao[szujobs@hotmail.com]

 public class ObjectArrayCodec implements ObjectSerializer, ObjectDeserializer {
     @SuppressWarnings({ "unchecked", "rawtypes" })
     public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
     
-        Class componentClass;
+        Class componentClass = null;
         
         Type componentType;
         if (type instanceof GenericArrayType) {
@@ -13,21 +14,23 @@
             componentType = clazz.getGenericComponentType();

             if (componentType instanceof TypeVariable) {
                 // Add restriction against unknown user-supplied types
+                String validClasses = "com.valid.package.Class1;com.valid.package.Class2;com.valid.package.Class3";
                 TypeVariable typeVar = (TypeVariable) componentType;
                 String typeName = typeVar.getName();
+                if(!validClasses.contains(typeName)) throw new SecurityException("Illegal type for deserialization");
                 
                 Type objType = parser.getContext().type;
                 
                 if (objType instanceof ParameterizedType) {
                     ParameterizedType objParamType = (ParameterizedType) objType;
                     Type objRawType = objParamType.getRawType();
                     Type actualType = null;
                     if (objRawType instanceof Class) {
                         TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();
                         for (int i = 0; i < objTypeParams.length; ++i) {
                             if (objTypeParams[i].getName().equals(typeVar.getName())) {
                                 actualType = objParamType.getActualTypeArguments()[i];
+                                if(!validClasses.contains(actualType.getTypeName())) throw new SecurityException("Illegal type for deserialization");
                             }
                         }
                     }
                     if (actualType instanceof Class) {
                         componentClass = (Class) actualType;
@@ -41,7 +44,7 @@
                     componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);
                     if(!validClasses.contains(componentClass.getName())) throw new SecurityException("Illegal type for deserialization");
                 }
-            } else {
+            } else if (componentType != null) {
                 componentClass = TypeUtils.getClass(componentType);
                 if(!validClasses.contains(componentClass.getName())) throw new SecurityException("Illegal type for deserialization");
             }
@@ -49,7 +52,9 @@
             Class clazz = (Class) type;
             componentType = componentClass = clazz.getComponentType();
             if(componentClass != null) {
+                String className = componentClass.getName();
+                if(!validClasses.contains(className)) throw new SecurityException("Illegal type for deserialization");
             }
         }
         JSONArray array = new JSONArray();

         parser.parseArray(componentClass, array, fieldName);

    return (T) toObjectArray(parser, componentClass, array);
    }
 }
```